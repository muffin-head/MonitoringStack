name: Deploy Monitoring Stack

on:
  push:
    branches:
      - main

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Authenticate with Azure CLI
      - name: Authenticate with Azure CLI
        run: az login --use-device-code

      # Step 3: Set Azure Subscription
      - name: Set Azure Subscription
        run: az account set --subscription "1fad5e2e-cd4b-437b-8fff-ee503b4e0e29"

      # Step 4: Configure AKS Context
      - name: Set Up AKS Context
        run: |
          az aks get-credentials \
            --resource-group rg-aks-acr-terraformv1 \
            --name aks-terraform-clusterv1 \
            --overwrite-existing

      # Step 5: Apply Namespace for Monitoring
      - name: Create Namespace
        run: |
          kubectl apply -f manifests/namespace.yaml

      # Step 6: Add Helm Repositories for Prometheus and Grafana
      - name: Add Helm Repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      # Step 7: Deploy Prometheus
      - name: Deploy Prometheus
        run: |
          helm install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            --create-namespace

      # Step 8: Apply Prometheus Config
      - name: Apply Prometheus Configuration
        run: |
          kubectl apply -f manifests/prometheus-config.yaml

      # Step 9: Deploy Grafana
      - name: Deploy Grafana
        run: |
          helm install grafana grafana/grafana \
            --namespace monitoring \
            --set adminPassword=admin \
            --set service.type=LoadBalancer

      # Step 10: Wait for Grafana Service to Get an External IP
      - name: Wait for Grafana Service to Get an External IP
        run: |
          echo "Waiting for the Grafana service to get an external IP..."
          sleep 60  # Wait for LoadBalancer provisioning

      # Step 11: Retrieve Grafana External IP
      - name: Get Grafana External IP
        id: grafana-ip
        run: |
          export GRAFANA_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Grafana External IP: $GRAFANA_IP"
          echo "::set-output name=grafana_ip::$GRAFANA_IP"

      # Step 12: Display Grafana Access URL
      - name: Display Grafana Access URL
        run: |
          echo "Grafana is accessible at http://${{ steps.grafana-ip.outputs.grafana_ip }}:3000"
